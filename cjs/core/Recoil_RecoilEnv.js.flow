/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 * @format
 * @oncall recoil
 */

'use strict';

const err = require('recoil-shared/util/Recoil_err');
const gkx = require('recoil-shared/util/Recoil_gkx');

export type RecoilEnv = {
  RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED: boolean,
  RECOIL_GKS_ENABLED_UNSTABLE: string[],
};

const env: RecoilEnv = new Proxy(
  {
    RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED: true,
    RECOIL_GKS_ENABLED_UNSTABLE: [],
  },
  {
    set(obj, prop, value) {
      if (prop === 'RECOIL_GKS_ENABLED_UNSTABLE') {
        // Remove old GKs set in the environment, filter out any GKS that are
        // already set by default, and set new GKs.
        obj[prop].forEach(gkx.setFail);
        obj[prop] = value.filter(gk => !gkx(gk));
        obj[prop].forEach(gkx.setPass);
      } else {
        obj[prop] = value;
      }

      return true;
    },
  },
);

function readProcessEnvBooleanFlag(name: string, set: boolean => void) {
  const sanitizedValue = process.env[name]?.toLowerCase()?.trim();

  if (sanitizedValue == null || sanitizedValue === '') {
    return;
  }

  const allowedValues = ['true', 'false'];
  if (!allowedValues.includes(sanitizedValue)) {
    throw err(
      `process.env.${name} value must be 'true', 'false', or empty: ${sanitizedValue}`,
    );
  }

  set(sanitizedValue === 'true');
}

function readProcessEnvStringArrayFlag(name: string, set: (string[]) => void) {
  const sanitizedValue = process.env[name]?.trim();

  if (sanitizedValue == null || sanitizedValue === '') {
    return;
  }

  set(sanitizedValue.split(/\s*,\s*/));
}

/**
 * Allow NodeJS/NextJS/etc to set the initial state through process.env variable
 * Note:  we don't assume 'process' is available in all runtime environments
 *
 * @see https://github.com/facebookexperimental/Recoil/issues/733
 */
function applyProcessEnvFlagOverrides() {
  // note: this check is needed in addition to the check below, runtime error will occur without it!
  // eslint-disable-next-line fb-www/typeof-undefined
  if (typeof process === 'undefined') {
    return;
  }

  if (process?.env == null) {
    return;
  }

  readProcessEnvBooleanFlag(
    'RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED',
    value => {
      env.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED = value;
    },
  );
  readProcessEnvStringArrayFlag('RECOIL_GKS_ENABLED_UNSTABLE', value => {
    env.RECOIL_GKS_ENABLED_UNSTABLE = value;
  });
}

applyProcessEnvFlagOverrides();

module.exports = env;
